// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMatrixDomainInterface creates a new instance of MockMatrixDomainInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatrixDomainInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatrixDomainInterface {
	mock := &MockMatrixDomainInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMatrixDomainInterface is an autogenerated mock type for the MatrixDomainInterface type
type MockMatrixDomainInterface struct {
	mock.Mock
}

type MockMatrixDomainInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatrixDomainInterface) EXPECT() *MockMatrixDomainInterface_Expecter {
	return &MockMatrixDomainInterface_Expecter{mock: &_m.Mock}
}

// ListMatrixOperations provides a mock function for the type MockMatrixDomainInterface
func (_mock *MockMatrixDomainInterface) ListMatrixOperations() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListMatrixOperations")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMatrixDomainInterface_ListMatrixOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMatrixOperations'
type MockMatrixDomainInterface_ListMatrixOperations_Call struct {
	*mock.Call
}

// ListMatrixOperations is a helper method to define mock.On call
func (_e *MockMatrixDomainInterface_Expecter) ListMatrixOperations() *MockMatrixDomainInterface_ListMatrixOperations_Call {
	return &MockMatrixDomainInterface_ListMatrixOperations_Call{Call: _e.mock.On("ListMatrixOperations")}
}

func (_c *MockMatrixDomainInterface_ListMatrixOperations_Call) Run(run func()) *MockMatrixDomainInterface_ListMatrixOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatrixDomainInterface_ListMatrixOperations_Call) Return(s string, err error) *MockMatrixDomainInterface_ListMatrixOperations_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMatrixDomainInterface_ListMatrixOperations_Call) RunAndReturn(run func() (string, error)) *MockMatrixDomainInterface_ListMatrixOperations_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMatrix provides a mock function for the type MockMatrixDomainInterface
func (_mock *MockMatrixDomainInterface) ProcessMatrix(ctx context.Context, operation string, filePath string) (string, error) {
	ret := _mock.Called(ctx, operation, filePath)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMatrix")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, operation, filePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, operation, filePath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, operation, filePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMatrixDomainInterface_ProcessMatrix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMatrix'
type MockMatrixDomainInterface_ProcessMatrix_Call struct {
	*mock.Call
}

// ProcessMatrix is a helper method to define mock.On call
//   - ctx context.Context
//   - operation string
//   - filePath string
func (_e *MockMatrixDomainInterface_Expecter) ProcessMatrix(ctx interface{}, operation interface{}, filePath interface{}) *MockMatrixDomainInterface_ProcessMatrix_Call {
	return &MockMatrixDomainInterface_ProcessMatrix_Call{Call: _e.mock.On("ProcessMatrix", ctx, operation, filePath)}
}

func (_c *MockMatrixDomainInterface_ProcessMatrix_Call) Run(run func(ctx context.Context, operation string, filePath string)) *MockMatrixDomainInterface_ProcessMatrix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMatrixDomainInterface_ProcessMatrix_Call) Return(s string, err error) *MockMatrixDomainInterface_ProcessMatrix_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMatrixDomainInterface_ProcessMatrix_Call) RunAndReturn(run func(ctx context.Context, operation string, filePath string) (string, error)) *MockMatrixDomainInterface_ProcessMatrix_Call {
	_c.Call.Return(run)
	return _c
}
