// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMatrixRepositoryInterface creates a new instance of MockMatrixRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatrixRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatrixRepositoryInterface {
	mock := &MockMatrixRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMatrixRepositoryInterface is an autogenerated mock type for the MatrixRepositoryInterface type
type MockMatrixRepositoryInterface struct {
	mock.Mock
}

type MockMatrixRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatrixRepositoryInterface) EXPECT() *MockMatrixRepositoryInterface_Expecter {
	return &MockMatrixRepositoryInterface_Expecter{mock: &_m.Mock}
}

// GetFileContent provides a mock function for the type MockMatrixRepositoryInterface
func (_mock *MockMatrixRepositoryInterface) GetFileContent(ctx context.Context, filePath string) (*MatrixFileContent, error) {
	ret := _mock.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContent")
	}

	var r0 *MatrixFileContent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*MatrixFileContent, error)); ok {
		return returnFunc(ctx, filePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *MatrixFileContent); ok {
		r0 = returnFunc(ctx, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MatrixFileContent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, filePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMatrixRepositoryInterface_GetFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileContent'
type MockMatrixRepositoryInterface_GetFileContent_Call struct {
	*mock.Call
}

// GetFileContent is a helper method to define mock.On call
//   - ctx context.Context
//   - filePath string
func (_e *MockMatrixRepositoryInterface_Expecter) GetFileContent(ctx interface{}, filePath interface{}) *MockMatrixRepositoryInterface_GetFileContent_Call {
	return &MockMatrixRepositoryInterface_GetFileContent_Call{Call: _e.mock.On("GetFileContent", ctx, filePath)}
}

func (_c *MockMatrixRepositoryInterface_GetFileContent_Call) Run(run func(ctx context.Context, filePath string)) *MockMatrixRepositoryInterface_GetFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMatrixRepositoryInterface_GetFileContent_Call) Return(matrixFileContent *MatrixFileContent, err error) *MockMatrixRepositoryInterface_GetFileContent_Call {
	_c.Call.Return(matrixFileContent, err)
	return _c
}

func (_c *MockMatrixRepositoryInterface_GetFileContent_Call) RunAndReturn(run func(ctx context.Context, filePath string) (*MatrixFileContent, error)) *MockMatrixRepositoryInterface_GetFileContent_Call {
	_c.Call.Return(run)
	return _c
}
