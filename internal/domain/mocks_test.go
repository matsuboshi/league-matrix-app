// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"

	"github.com/matsuboshi/league-matrix-app/internal/entity"
	"github.com/matsuboshi/league-matrix-app/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMatrixDomainInterface creates a new instance of MockMatrixDomainInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatrixDomainInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatrixDomainInterface {
	mock := &MockMatrixDomainInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMatrixDomainInterface is an autogenerated mock type for the MatrixDomainInterface type
type MockMatrixDomainInterface struct {
	mock.Mock
}

type MockMatrixDomainInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatrixDomainInterface) EXPECT() *MockMatrixDomainInterface_Expecter {
	return &MockMatrixDomainInterface_Expecter{mock: &_m.Mock}
}

// ListMatrixOperations provides a mock function for the type MockMatrixDomainInterface
func (_mock *MockMatrixDomainInterface) ListMatrixOperations() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListMatrixOperations")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMatrixDomainInterface_ListMatrixOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMatrixOperations'
type MockMatrixDomainInterface_ListMatrixOperations_Call struct {
	*mock.Call
}

// ListMatrixOperations is a helper method to define mock.On call
func (_e *MockMatrixDomainInterface_Expecter) ListMatrixOperations() *MockMatrixDomainInterface_ListMatrixOperations_Call {
	return &MockMatrixDomainInterface_ListMatrixOperations_Call{Call: _e.mock.On("ListMatrixOperations")}
}

func (_c *MockMatrixDomainInterface_ListMatrixOperations_Call) Run(run func()) *MockMatrixDomainInterface_ListMatrixOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatrixDomainInterface_ListMatrixOperations_Call) Return(s string, err error) *MockMatrixDomainInterface_ListMatrixOperations_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMatrixDomainInterface_ListMatrixOperations_Call) RunAndReturn(run func() (string, error)) *MockMatrixDomainInterface_ListMatrixOperations_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMatrix provides a mock function for the type MockMatrixDomainInterface
func (_mock *MockMatrixDomainInterface) ProcessMatrix(ctx context.Context, operation string, filePath string) (string, error) {
	ret := _mock.Called(ctx, operation, filePath)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMatrix")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, operation, filePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, operation, filePath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, operation, filePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMatrixDomainInterface_ProcessMatrix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMatrix'
type MockMatrixDomainInterface_ProcessMatrix_Call struct {
	*mock.Call
}

// ProcessMatrix is a helper method to define mock.On call
//   - ctx context.Context
//   - operation string
//   - filePath string
func (_e *MockMatrixDomainInterface_Expecter) ProcessMatrix(ctx interface{}, operation interface{}, filePath interface{}) *MockMatrixDomainInterface_ProcessMatrix_Call {
	return &MockMatrixDomainInterface_ProcessMatrix_Call{Call: _e.mock.On("ProcessMatrix", ctx, operation, filePath)}
}

func (_c *MockMatrixDomainInterface_ProcessMatrix_Call) Run(run func(ctx context.Context, operation string, filePath string)) *MockMatrixDomainInterface_ProcessMatrix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMatrixDomainInterface_ProcessMatrix_Call) Return(s string, err error) *MockMatrixDomainInterface_ProcessMatrix_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMatrixDomainInterface_ProcessMatrix_Call) RunAndReturn(run func(ctx context.Context, operation string, filePath string) (string, error)) *MockMatrixDomainInterface_ProcessMatrix_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMatrixOperationsDomainInterface creates a new instance of MockMatrixOperationsDomainInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatrixOperationsDomainInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatrixOperationsDomainInterface {
	mock := &MockMatrixOperationsDomainInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMatrixOperationsDomainInterface is an autogenerated mock type for the MatrixOperationsDomainInterface type
type MockMatrixOperationsDomainInterface struct {
	mock.Mock
}

type MockMatrixOperationsDomainInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatrixOperationsDomainInterface) EXPECT() *MockMatrixOperationsDomainInterface_Expecter {
	return &MockMatrixOperationsDomainInterface_Expecter{mock: &_m.Mock}
}

// IsValidOperation provides a mock function for the type MockMatrixOperationsDomainInterface
func (_mock *MockMatrixOperationsDomainInterface) IsValidOperation(ctx context.Context, operation string) error {
	ret := _mock.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for IsValidOperation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, operation)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMatrixOperationsDomainInterface_IsValidOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidOperation'
type MockMatrixOperationsDomainInterface_IsValidOperation_Call struct {
	*mock.Call
}

// IsValidOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - operation string
func (_e *MockMatrixOperationsDomainInterface_Expecter) IsValidOperation(ctx interface{}, operation interface{}) *MockMatrixOperationsDomainInterface_IsValidOperation_Call {
	return &MockMatrixOperationsDomainInterface_IsValidOperation_Call{Call: _e.mock.On("IsValidOperation", ctx, operation)}
}

func (_c *MockMatrixOperationsDomainInterface_IsValidOperation_Call) Run(run func(ctx context.Context, operation string)) *MockMatrixOperationsDomainInterface_IsValidOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMatrixOperationsDomainInterface_IsValidOperation_Call) Return(err error) *MockMatrixOperationsDomainInterface_IsValidOperation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMatrixOperationsDomainInterface_IsValidOperation_Call) RunAndReturn(run func(ctx context.Context, operation string) error) *MockMatrixOperationsDomainInterface_IsValidOperation_Call {
	_c.Call.Return(run)
	return _c
}

// ListOperations provides a mock function for the type MockMatrixOperationsDomainInterface
func (_mock *MockMatrixOperationsDomainInterface) ListOperations() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockMatrixOperationsDomainInterface_ListOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOperations'
type MockMatrixOperationsDomainInterface_ListOperations_Call struct {
	*mock.Call
}

// ListOperations is a helper method to define mock.On call
func (_e *MockMatrixOperationsDomainInterface_Expecter) ListOperations() *MockMatrixOperationsDomainInterface_ListOperations_Call {
	return &MockMatrixOperationsDomainInterface_ListOperations_Call{Call: _e.mock.On("ListOperations")}
}

func (_c *MockMatrixOperationsDomainInterface_ListOperations_Call) Run(run func()) *MockMatrixOperationsDomainInterface_ListOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatrixOperationsDomainInterface_ListOperations_Call) Return(strings []string) *MockMatrixOperationsDomainInterface_ListOperations_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockMatrixOperationsDomainInterface_ListOperations_Call) RunAndReturn(run func() []string) *MockMatrixOperationsDomainInterface_ListOperations_Call {
	_c.Call.Return(run)
	return _c
}

// RunOperation provides a mock function for the type MockMatrixOperationsDomainInterface
func (_mock *MockMatrixOperationsDomainInterface) RunOperation(ctx context.Context, matrix *entity.Matrix, operation string) (string, error) {
	ret := _mock.Called(ctx, matrix, operation)

	if len(ret) == 0 {
		panic("no return value specified for RunOperation")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Matrix, string) (string, error)); ok {
		return returnFunc(ctx, matrix, operation)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Matrix, string) string); ok {
		r0 = returnFunc(ctx, matrix, operation)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entity.Matrix, string) error); ok {
		r1 = returnFunc(ctx, matrix, operation)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMatrixOperationsDomainInterface_RunOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunOperation'
type MockMatrixOperationsDomainInterface_RunOperation_Call struct {
	*mock.Call
}

// RunOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - matrix *entity.Matrix
//   - operation string
func (_e *MockMatrixOperationsDomainInterface_Expecter) RunOperation(ctx interface{}, matrix interface{}, operation interface{}) *MockMatrixOperationsDomainInterface_RunOperation_Call {
	return &MockMatrixOperationsDomainInterface_RunOperation_Call{Call: _e.mock.On("RunOperation", ctx, matrix, operation)}
}

func (_c *MockMatrixOperationsDomainInterface_RunOperation_Call) Run(run func(ctx context.Context, matrix *entity.Matrix, operation string)) *MockMatrixOperationsDomainInterface_RunOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entity.Matrix
		if args[1] != nil {
			arg1 = args[1].(*entity.Matrix)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMatrixOperationsDomainInterface_RunOperation_Call) Return(s string, err error) *MockMatrixOperationsDomainInterface_RunOperation_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMatrixOperationsDomainInterface_RunOperation_Call) RunAndReturn(run func(ctx context.Context, matrix *entity.Matrix, operation string) (string, error)) *MockMatrixOperationsDomainInterface_RunOperation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMatrixValidatorDomainInterface creates a new instance of MockMatrixValidatorDomainInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatrixValidatorDomainInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatrixValidatorDomainInterface {
	mock := &MockMatrixValidatorDomainInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMatrixValidatorDomainInterface is an autogenerated mock type for the MatrixValidatorDomainInterface type
type MockMatrixValidatorDomainInterface struct {
	mock.Mock
}

type MockMatrixValidatorDomainInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatrixValidatorDomainInterface) EXPECT() *MockMatrixValidatorDomainInterface_Expecter {
	return &MockMatrixValidatorDomainInterface_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function for the type MockMatrixValidatorDomainInterface
func (_mock *MockMatrixValidatorDomainInterface) Validate(ctx context.Context, matrix *repository.MatrixFileContent) (*entity.Matrix, error) {
	ret := _mock.Called(ctx, matrix)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *entity.Matrix
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *repository.MatrixFileContent) (*entity.Matrix, error)); ok {
		return returnFunc(ctx, matrix)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *repository.MatrixFileContent) *entity.Matrix); ok {
		r0 = returnFunc(ctx, matrix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Matrix)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *repository.MatrixFileContent) error); ok {
		r1 = returnFunc(ctx, matrix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMatrixValidatorDomainInterface_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockMatrixValidatorDomainInterface_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - matrix *repository.MatrixFileContent
func (_e *MockMatrixValidatorDomainInterface_Expecter) Validate(ctx interface{}, matrix interface{}) *MockMatrixValidatorDomainInterface_Validate_Call {
	return &MockMatrixValidatorDomainInterface_Validate_Call{Call: _e.mock.On("Validate", ctx, matrix)}
}

func (_c *MockMatrixValidatorDomainInterface_Validate_Call) Run(run func(ctx context.Context, matrix *repository.MatrixFileContent)) *MockMatrixValidatorDomainInterface_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *repository.MatrixFileContent
		if args[1] != nil {
			arg1 = args[1].(*repository.MatrixFileContent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMatrixValidatorDomainInterface_Validate_Call) Return(matrix1 *entity.Matrix, err error) *MockMatrixValidatorDomainInterface_Validate_Call {
	_c.Call.Return(matrix1, err)
	return _c
}

func (_c *MockMatrixValidatorDomainInterface_Validate_Call) RunAndReturn(run func(ctx context.Context, matrix *repository.MatrixFileContent) (*entity.Matrix, error)) *MockMatrixValidatorDomainInterface_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateFilePath provides a mock function for the type MockMatrixValidatorDomainInterface
func (_mock *MockMatrixValidatorDomainInterface) ValidateFilePath(ctx context.Context, filePath string) error {
	ret := _mock.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFilePath")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, filePath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMatrixValidatorDomainInterface_ValidateFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateFilePath'
type MockMatrixValidatorDomainInterface_ValidateFilePath_Call struct {
	*mock.Call
}

// ValidateFilePath is a helper method to define mock.On call
//   - ctx context.Context
//   - filePath string
func (_e *MockMatrixValidatorDomainInterface_Expecter) ValidateFilePath(ctx interface{}, filePath interface{}) *MockMatrixValidatorDomainInterface_ValidateFilePath_Call {
	return &MockMatrixValidatorDomainInterface_ValidateFilePath_Call{Call: _e.mock.On("ValidateFilePath", ctx, filePath)}
}

func (_c *MockMatrixValidatorDomainInterface_ValidateFilePath_Call) Run(run func(ctx context.Context, filePath string)) *MockMatrixValidatorDomainInterface_ValidateFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMatrixValidatorDomainInterface_ValidateFilePath_Call) Return(err error) *MockMatrixValidatorDomainInterface_ValidateFilePath_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMatrixValidatorDomainInterface_ValidateFilePath_Call) RunAndReturn(run func(ctx context.Context, filePath string) error) *MockMatrixValidatorDomainInterface_ValidateFilePath_Call {
	_c.Call.Return(run)
	return _c
}
